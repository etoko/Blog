<h1>BiDirectional Forwarding Detection</h1>
<p>
Bidirectional Forwarding Detection (BFD) is a  light-weight standards-based 
protocol(defined by RFC 5880) that detects failure in the forwarding path on a 
layer 3 network between two adjacent routers. These failures may be on the 
interfaces, data links, and forwarding planes of devices not directly connected 
to the routers in a layer 2 network, tunnels. 
BFD is capable of working on multiple media types.

BFD uses UDP packets to exchange control information with peers on port 49152 as 
the source port and destination port of 3784.  
</p>
<p>
BFD's primary goal is to detect loss of connectivity between two devices quickly 
and efficiently. 
BFD notifies client protocols of the link failure. BFD client protocols include 
OSPF, IS-IS RSVP, EIGRP, HSRP, BGP, static routes that have registered to receive 
BFD notifications. 
BFD provides faster and more consistent failure detection than the hello and 
keepalive timers of routing protocols. Failure detection in BFD can be in the 
millisecond range. Most routing protocol timers will detect a failure at a minimum 
one second after it has occurred.
It is up to these client protocols to determine how to recover from the failure 
of the link between the two devices. The client protocols may try to find 
alternative paths for routes that were initially accessible through the failed device.
The client protocols use the BFD-provided information independently. BFD runs to serve these 
client protocols. It is pointless to run BFD without client protocols.
During its operation, in some environments, BFD packetst are processed by the 
line cards. As such, BFD tries not to interrupt CPU operation.
</p>

<p>
Networks carrying realtime traffic such as video and voice need speedy network convergence. Link failure detection time 
usually delays convergence of networks. Traditional link failure detecton relies on:
<UL>
  <li>Hello message timeouts of routing protocols.</li>
  <li>Transmission technology capability to detect failure.</li>
</UL>
</p>
<p>
BFD runs independent of routing protocol hellos and notifies the client protocols of 
link failure by sending rapid failure detection notices to routing protocols and
reducing convergence time through routing table recalculation.
BFD can be used in place of routing protocol timers and can act as
a single method of liveliness detection between nodes irrespective of media type.
</p>
<p>
On distributed platforms, BFD packets can be processed on interface modules of the line card hence
it is not CPU intensive.
In most cases, routing protocol hello packets are processed by the control plane (CPU).
</p>
<p>
BFD also provides failure detection on virtual circuits such as MPLS LSP, 
Ethernet virtual circuits tunnels. 
</p>

<p>
By default, BFD topology is primarily point-to-point running on a link between two devices. 
</p>

<p>
BFD can be implemented in multiple ways:
<ol>
  <li>Single-hop BFD: BFD for IPv4 and IPv6</li>
  <li>Generic Application of BFD</li>
  <li>BFD for MPLS (LSPs)</li>
  <li>Multihop BFD for peers that are several hops away from each other</li>
</ol>
</p>
</p>

<h2>Benefits of BFD</h2>
<p>
The closest alternative to using BFD for failure detection is the hello packet 
 of routing protocols EIGRP, OSPF, IS-IS and BGP keepalives. 
If configured to their minimum supported values, these routing protocol timers 
usually detect failures of peers or their links within one second of the failure. 
With OSPF though, configuration of sub-second values is possible using the interface command 
<code><b>ip ospf dead-interval minimal hello-multiplier <i>multiplier</i></b></code> 
where multiplier is the number of hello packets sent per second;
</p>
<p>
BFD does have some advantages over the aforementioned failure detection techniques:
<ul>
  <li>BFD is protocol independent and can therefore act as a generic failure 
  detection mechanism for various routing protocols.</li>
  <li>Parts of BFD failure mechanisms can be configured to operate at the data-plane
  reducing or eliminating CPU involvement in failure detection. This can be contrasted
  with failure detection methods of routing protocols that largely operate at the 
  control plane.</li>
  <li>BFD is able to detect failures in the sub-second range compared to most  
  routing protocol failure detection which is usually at a minimum of one second.</li>
</ul>
</p>

<h2>Prerequisites for BFD</h2>
<p>
<ul>
  <li>Cisco Express Forwarding (CEF) needs to be enabled.</li>
  <li>The client routing protocol should be configured on the router before BFD is deployed.
  
</ul>
</p>

<h2>Restrictions of BFD</h2>
<p>
<ul>
  <li>When BFD is enabled on an interface, an access control list (ACL) with the "log" opton is not supported on that 
    interface.</li>
  <li>BFD is not supported on IPSec.</li>
 </ul> 
</p>

<h2>BFD Modes</h2>
<p>
BFD operates in one of two modes: asynchronous or demand mode. BFD also offers an echo function which works with both modes.
Most vendors support asynchronous mode operating with or without echo function enabled. 
</p>
<h3>Asynchronous Mode</h3>
<p>
BFD control packets are exchanged by neighboring systems at pre-agreed time intervals 
which is usually in milliseconds. If a specified number of sequential packets 
are not received from the BFD peer, BFD declares the session to be down and notifies 
any registered protocol of this failure. Asynchronous mode is supported by Cisco IOS.
</p>
<h3>Demand Mode</h3>
<p>
Once the BFD session is established, the participating systems can request that the BFD packets not be sent, then request 
an exchange of packets only when needed to verify connectivity. 
Though this mode is defined in the RFC 5880, few network equipment vendors support BFD demand mode. 
</p>

<h2>How BFD Works</h2>
<p>
Once a BFD session is established with a neighbor, BFD exchanges control packets to verify connectivity and inform the 
requesting protocol(s) of link failure if a specified number of successive packets are not received. The requesting protocol is 
then responsible for responding to the loss of connectivity.
Routing protocols using BFD for failure detection continue to operate normally when BFD is enabled, including the exchange 
of their respective hello packets.
</p>
<p>
A BFD session is a three-way handshake and tear-down process:
<ol>
  <li>Routing protocol discovers neighbor and registers neighbor as a client with BFD.</li>
  <li>BFD control packets act as keepalive to maintain the neighbor session.</li>
  <li>Failure of the BFD session triggers a notification to the registered routing 
  protocol client which in term tears down the routing protocol neighbor session.
  If an alternative path exists the routing protocol immediately converges.</li>
</ol>
</p>
<h2>BFD Packets</h2>
<p>
BFD utilises control packets to exchange control information as well as detect the 
liveliness of the BFD peer.
</p>
<h3>BFD Control Packet Format</h3>
<p>
<table cellspacing="0" width="100%">
  <thead style="font-weight: bold; background:#a2a2a2;">
    <tr>
      <td width="25%" style="border: 1px solid;"> Field</td>
      <td style="border: 1px solid;">Description</td>
    </tr>
  </thead>
<tbody>
  <tr>
  <td style="border-bottom: 1px solid; font-weight: bold;">Diagnostic Code (Diag) and Session State:</td>
  <td style="border-bottom: 1px solid;">Session Up/Down/Init and reason</td>
  </tr>
  <tr>
  <td style="border-bottom: 1px solid; font-weight: bold;">Dicriminators: </td>
  <td style="border-bottom: 1px solid;">demultiplexers</td>
  </tr>
  <tr>
  <td style="border-bottom: 1px solid; font-weight: bold;"> Detect Time Multiplier</td>
  <td style="border-bottom: 1px solid;"> Used to calculate detection times for peers.
    The detection time is the product of the Detect Time Multiplier and Min RX Interval that is used to 
    question a peer's liveliness if a control packet is not received within this product in milliseconds.
  </td>
  </tr>
  <tr>
  <td style="border-bottom: 1px solid; font-weight: bold;"> Desired Min TX Interval (msecs):</td>
  <td style="border-bottom: 1px solid;">Desired interval to transmit control packets. 
  How fast the peer desires to send control packets.</td>
  </tr>
  <tr>
  <td style="border-bottom: 1px solid; font-weight: bold;">Required Min RX Interval (msecs): </td>
  <td style="border-bottom: 1px solid;">Minimum receive interval peer can handle.
    Desired interval how fast the peer can receive packets.</td>
  </tr>
  <tr>
  <td style="border-bottom: 1px solid; font-weight: bold;"> Required Min Echo Interval</td>
  <td style="border-bottom: 1px solid;">Interval within which echo packets are received to 
  indicate liveliness of a peer (if the echo function is enabled).
  </td>
  </tr>
</tbody>
</table>
</p>
<p>
The following output shows a Wireshark packet capture of a BFD control packet. From this packet capture, it can be 
determined that the transmit interval is configured to 1000ms, the receive interval to 1000ms, 
minimum echo interval to 50ms and the multiplier to 3 (x3 the value of the transmit interval).
</p>
<div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
BFD Control message                                             <br>
&nbsp;&nbsp;&nbsp;&nbsp;001. .... = Protocol Version: 1                             <br>
&nbsp;&nbsp;&nbsp;&nbsp;...0 0000 = Diagnostic Code: No Diagnostic (0x00)           <br>
&nbsp;&nbsp;&nbsp;&nbsp;01.. .... = Session State: Down (0x1)                       <br>
&nbsp;&nbsp;&nbsp;&nbsp;Message Flags: 0x40                                         <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0... .. = Poll: Not set                                 <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.0.. .. = Final: Not set                                <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;..0. .. = Control Plane Independent: Not set            <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...0 .. = Authentication Present: Not set               <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.... 0. = Demand: Not set                               <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.... .0 = Multipoint: Not set                           <br>
&nbsp;&nbsp;&nbsp;&nbsp;Detect Time Multiplier: 3 (= 3000 ms Detection time)        <br>
&nbsp;&nbsp;&nbsp;&nbsp;Message Length: 24 bytes                                    <br>
&nbsp;&nbsp;&nbsp;&nbsp;My Discriminator: 0x00000002                                <br>
&nbsp;&nbsp;&nbsp;&nbsp;Your Discriminator: 0x00000000                              <br>
&nbsp;&nbsp;&nbsp;&nbsp;Desired Min TX Interval: 1000 ms (1000000 us)               <br>
&nbsp;&nbsp;&nbsp;&nbsp;Required Min RX Interval: 1000 ms (1000000 us)              <br>
&nbsp;&nbsp;&nbsp;&nbsp;Required Min Echo Interval:   50 ms (50000 us)              <br>

</code>
</div>

<h3>Timer Negotiation and Detection Times</h3>
<p>
When making decisions on detection timers, BFD sends packets as fast as their local peers allow but no faster.
A BFD device notes the <code><b>Required Min RX  Interval</b></code> value received from a peer's BFD control packet 
(how fast a peer can receive BFD packets) and compares it to its configured 
<code><b>Desired Min TX Interval</b></code> (how fast it can send BFD control packets). 
The operational transmit interval is then set to whichever of the two values is higher.
</p>
<p>
When calculating the detection timer values, the local detection is equal to the product of the 
peer's <code><b>Detect Time Multiplier</b></code> and the peer's Tx value. The TX timer and the detection times can be different for each peer.
</p>
<table width="100%" cellspacing="0">
  <caption>
  Given three scenarios where R1 forms a BFD sessions with peer R2, R3 forms a BFD session 
  with R4 and R5 forms a BFD session with R6, the selected transmit interval and detection time are calculated as
  shown in the following table:
  </caption>
  <thead style="font-weight: bold; border-bottom: 1px solid; background:#a8a8a8;">
    <tr><td style="border: 1px solid;">Device</td><td style="border: 1px solid;">TX Interval</td><td style="border: 1px solid;">Min_Rx</td>
    <td style="border: 1px solid;">Operational TX</td><td style="border: 1px solid;">Multiplier</td><td style="border: 1px solid;">Detection Time</td></tr>
  </thead>
  <tbody>
    <tr><td style="border-bottom: 1px solid; border-left: 3px solid;">R1</td><td style="border-bottom: 1px solid;">50ms</td><td style="border-bottom: 1px solid;">50ms</td><td style="border-bottom: 1px solid;">50ms</td><td style="border-bottom: 1px solid;">3</td><td style="border-bottom: 1px solid; border-right: 3px solid;">3 &times;50ms = 150ms</td></tr>
    <tr><td style="border-bottom: 3px solid; border-left: 3px solid;">R2</td><td style="border-bottom: 3px solid;">50ms</td><td style="border-bottom: 3px solid;">50ms</td><td style="border-bottom: 3px solid;">50ms</td><td style="border-bottom: 3px solid;">3</td><td style="border-bottom: 3px solid; border-right: 3px solid;">3 &times;50ms = 150ms</td></tr>
    <tr><td style="background: #c1b1b1; border-bottom: 1px solid; border-left: 3px solid;">R3</td><td style="background: #c1b1b1; border-bottom: 1px solid;">50ms</td><td style="background: #c1b1b1; border-bottom: 1px solid;">150ms</td><td style="background: #c1b1b1; border-bottom: 1px solid;">150ms</td><td style="background: #c1b1b1; border-bottom: 1px solid;">5</td><td style="background: #c1b1b1; border-bottom: 1px solid; border-right: 3px solid;">10 &times;150ms = 1500ms</td></tr>
    <tr><td style="background: #c1b1b1; border-bottom: 3px solid;border-left: 3px solid;">R4</td><td style="background: #c1b1b1; border-bottom: 3px solid;">50ms</td><td style="background: #c1b1b1; border-bottom: 3px solid;">150ms</td><td style="background: #c1b1b1; border-bottom: 3px solid;">150ms</td><td style="background: #c1b1b1; border-bottom: 3px solid;">10</td><td style="background: #c1b1b1; border-bottom: 3px solid; border-right: 3px solid;">5 &times; 150ms = 750ms</td></tr>
    <tr><td style="border-bottom: 1px solid; border-left: 3px solid;">R5</td><td style="border-bottom: 1px solid;">50ms</td><td style="border-bottom: 1px solid;">200ms</td><td style="border-bottom: 1px solid;">150ms</td><td style="border-bottom: 1px solid;">5</td><td style="border-bottom: 1px solid; border-right: 3px solid;">10 &times;500ms = 5000ms or 5s</td></tr>
    <tr><td style="border-bottom: 3px solid; border-left: 3px solid;">R6</td><td style="border-bottom: 3px solid;">500ms</td><td style="border-bottom: 3px solid;">150ms</td><td style="border-bottom: 3px solid;">500ms</td><td style="border-bottom: 3px solid;">10</td><td style="border-bottom: 3px solid; border-right: 3px solid;">5 &times; 150ms = 7500ms</td></tr>  
  </tbody>
</table>


<p>
The first device to detect that the peer is unreachable will set a flag in the 
control packet notifying the peer that it is unreachable. The local BFD will 
notify the client routing protocols in each of the peers resulting in both 
tearing down the routing protocol neighborship.
</p>

<h2>Echo Function</h2>
<p>
When the echo function is activated, echo packets are looped back through the hardware forwarding path of the neighbor 
system without involving the CPU. Link failure is detected by an interruption in the stream of echoed packets.
Echo function makes it possible for link failure detection using BFD to be handled 
at the data plane level and not involve the CPU.
</p>
<p>
The minimum reception rate for BFD control packets from the neighbor is also changed 
automatically when the echo function is operational, because liveness detection is 
supplied by the echo packets.
</p>
<p>
While BFD control messages are transmitted to UDP port 3784, BFD echo messages use UDP 
port 3785 for both source and destination ports of the BFD echo packet.
</p>
<p>
BFD started out based on a polling ("asynchronous") approach using control packets.
One router polls the other and gets a quick response back. The challenge with this is delay
in waking up the BFD process to send a reply, culminating in variable jitter in the response.
If the peer is slow in responding BFD triggers a link failure notification, which is not ideal.

It is possible to configure both peers to send BFD echo packets or one peer to send the BFD echo packet. 
The latter approach is referred to as BFD asymmetry.
</p>
<p>
The Echo function is an additional feature that can be enabled in any of the BFD operational modes 
i.e. asynchronous or demand modes. The BFD echo function enhances BFD in one very 
specific way; it allows the devices running BFD to test the actual forwarding path 
taken by data packets. This is a capability that the control packets are not able
to carry out. In some IOS distributions, the Echo function is enabled by default. 

</p>
<h3>Echo Packets</h3>
<p>
The Echo function uses echo packets using interesting values for the IP source 
and destination addresses. The destination IP address is set to 
the IP address of the sender. In other words, the destination IP address is the 
same as the source IP address of the sender. For Layer 2 addressing, the destination
address is the MAC address of the BFD peer.
</p>
<p>
After the receiver (BFD peer) receives an echo packet and determines that the 
destination IP address is different from any of its IP addresses, it 
consults the RIB/FIB to determine how to forward the packet and sends it to the 
sender. In this way it uses the data forwarding path of network traffic.
</p>
<h3>Echo Function in BFD Asynchronous Mode</h3>
<p>
Peers need to exchange BFD information such as intervals, State, Diag etc. Echo 
packets do not carry usable data and are technically processed by the sender. 
Control packets are still exchanged but the 
frequency is substantially decreased. In BFD asynchronous mode without the echo 
function, the control packets play the dual-role of exchanging BFD session 
information and detecting communication loss.

In BFD asynchronous mode with echo function, the echo function uses control packets 
to exchange BFD information as usual. However, the control packets are sent less 
frequently. More frequently sent are echo packets which take the primary role of
detecting communication loss.
</p>
<h3>Echo Function Activation</h3>
<p>
BFD peers use the control packet to signal activation of the echo function. 
The control packet field <code><b>Required Min Echo Interval</b></code> is used to signal 
echo function activation to a BFD peer. If the echo function is activated, the 
 <code><b>Required Min Echo Interval</b></code> field contains a value
 in milliseconds. It is used to communicate to the BFD peer the minimum rate
 of the sender receiving echo packets. Conceptually, it is similar to the 
 <code><b>Required Min RX Interval</b></code> of the Echo packet.  The frequency of 
 Echo packet are therefore partially dictated by the neighbors. Echo packets can
 not be sent more frequently than the <code><b>Required Min RX Interval</b></code> 
 values of the BFD peer.
 
 If the echo function is not activated, the control packets from the peer will 
 contain zero values for the  <code><b>Required Min Echo Interval</b></code> 
 field.
</p>

<h3>Restrictions to Using the Echo Function</h3>
<p>
<ol>
  <li>Disable ICMP redirects on any interface where the BFD echo function will 
  be used using the command <code><b>no ip icmp redirects</b></code>. 
  With ICMP redirect active on an interface, the interface will notice that the 
  echo packets are looped back. It will then generate an ICMP redirect message 
  for each echo packet. Disabling ICMP redirect messages helps in avoiding high 
  CPU uilization.</li>
  <li>Any uRPF checks will need to be disabled on the interface or an exception 
  should be made for echo packets on the interface. 
  Based on the way echo packets are transmitted and looped back, they fail uRPF checks; 
  depending on how strict the uRPF checks have been configured. If BFD echo mode and 
  uRPF are configured on the same interface, BFD sessions will flap.
  </li>

</ol>
</p>

<h3>BFD Slow Timer</h3>
<p>
BFD can use the slow timer to slow down the transmission rate of BFD control 
packets when the echo function is enabled. This reduces the number of BFD control 
packets that are sent between two BFD neighbors. With echo function enabled, 
control packets are not used for failure detection hence may not be desirable to 
be exchanged frequently. This, in turn, further lightens the CPU load.
</p>
<p>To configure BFd slow timer use the global configuration mode command 
<code><b>bfd slow-timer <i>milliseconds</i></b></code>:</p>
<div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
R6#<b>configure terminal</b><br>
Enter configuration commands, one per line.  End with CNTL/Z<br>
R6(config)#<b>bfd slow-timers 12000</b><br>
R6(config)#
</code></div>

<h1>BFD Configuration</h1>
<p>
Configuration of BFD is a two step process:
  <p><b>Step 1:</b> Enable BFD on interface through which the peer is reachable.
  <code><b>bfd interval <i>value</i> min_rx <i> value</i> multiplier</b> </code>
rate of exchanging hello control packets (similar to hello-timer) can be set in the range 50 - 9999 milliseconds.
min_rx: minimum interval supported for receiving BFD control packets from a neighbor. 
multiplier: used to compute the hold-down time. If multiplier is 3 and hello interval 50 then holddown timer is 150 ms.
  </p>
  <div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
  R6(config)#<b>interface gigabitethernet0/0</b><br>
  R6(config-if)#<b>bfd interval 100 min_rx 50 multiplier 3</b><br>
  </code></div>
<p>
Under an interface, to disable BFD for a specific interface for example OSPF, in interface mode issue the command:
<code><b>ip ospf bfd disable</b></code>
</p>
<p>
To enable BFD on an interface for a specific routing protocol, issue the following interface 
configuration command: <code><b>ip ospf bfd</b></code>
</p>
  <p><b>Step 2:</b> Configure the routing protocol to use BFD for failure detection. Interested clients 
  include static routing, EIGRP, OSPF, BGP, FHRP(HSRP, VRRP, GLBP), MPLS LSP, etc registers with BFD and 
  is notified as soon as BFD detects a neighbor loss.
</p>
<h3>BFD for BGP</h3>
<p>
BFD must be running on all participating BGP devices.
</p>
<div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
R6(config)#<b>router bgp 65531</b><br>
R6(config-router)#<b>neighbor 1.1.1.1 remote-as 65532</b><br>
R6(config-router)#<b>neighbor 1.1.1.1 fall-over bfd ?</b><br>
&nbsp;&nbsp;multi-hop&nbsp;&nbsp;&nbsp;Force BFD multi-hop to detect failure <br>
&nbsp;&nbsp;single-hop&nbsp;&nbsp;Force BFD single-hop to detect failure <br>
  <cr>
  
</code> </div>
<p>
BFD in BGP supports two session types: multi-hop and single-hop. This is because BGP supports BGP peers that can be 
directly connected or several hops away. This BFD session type will depend on the BGP session type of the neighbor 
being configured; if the neighbor is several hops away, configure the BFD multi-hop type. 
</p>
<h3>BFD in EIGRP</h3>
<p>
In EIGRP named mode, BFD is configured under the af-interface mode:
</p>
<div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
R6(config)#<b>router eigrp EIGRP_NAMED</b><br>
R6(config-router)#<b>address-family ipv4 autonomous-system 1</b><br>
R6(config-router-af)#<b>af-interface gigabitethernet0/0</b><br>
R6(config-router-af-interface)#<b>bfd</b><br>
R6(config-router-af-interface)#
</code></div>

<p>
If BFD is configured under <code><b>af-interface default</b></code>, all interfaces with EIGRP peers will be registered to 
receive BFD notifications. However, remember that BFD has to first be configured on the interface otherwise the 
following error messaage will be generated:
</p>
<div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
R6(config)#<b>router eigrp EIGRP_NAMED</b><br>
R6(config-router)#<b>address-family ipv4 autonomous-system 1</b><br>
R6(config-router-af)#<b>af-interface gigabitethernet0/0</b><br>
R6(config-router-af-interface)#<b>bfd</b><br>
%EIGRP: BFD interval is not configured on interface GigabitEthernet0/0 required for BFD operation.<br>
R6(config-router-af-interface)#
</code></div>
<p>
In EIGRP classic mode, EIGRP can be configured to receive BFD notifications on link failure 
on a single interface as below:
</p>
<div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
R6(config)#<b>router eigrp 2</b><br>
R6(config-router)#<b>bfd interface gigabitethernet 0/0</b>
</code></div>

<p>
In EIGRP classic mode, EIGRP can be configured to receive BFD notifications on all EIGRP-enabled interfaces as below:
</p>
<div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
R6(config)#<b>router eigrp 2</b><br>
R6(config-router)#<b>bfd all-interfaces</b>
</code></div>

<p>
<b>NOTE:</b> Configuration of EIGRP to receive notifications from all EIGRP enabled interfaces 
as demonstrated above does not issue a log message if BFD has not been enabled on the 
interface using the interface-mode BFD configuration commands.
</p>

<h3>BFD in OSPF</h3>
<p>
BFD is configured in OSPF for all interfaces with the router ospf mode command <code><b>bfd all-interfaces</b></code>.
It does not provide the additional flexibility of EIGRP of installing on select interfaces or all interfaces at once.
</p>
<h3>BFD in Static Routing</h3>
<p>
BFD is able to detect failures in the forwarding path of static routes. To configure 
BFD in static routing:
</p>
<div style="background-color:#f4f0ec; border-style:solid;border-width:1px;border-color:#D3D3D3">
<code>
R6(config)#<b>interface g1/0</b><br>
R2(config-if)#<b>bfd interval 250 min_rx 150 multiplier 3</b><br>
R2(config-if)#<b>exit</b><br>
R6(config)#<b>ip route static bfd gigabitethernet1/0 10.0.26.1</b><br>
</code></div>

<h2>Verification</h2>
<p>
BFD operation can be verified using the command <code><b>show bfd neighbors (detail) </b></code>
</p>

<h2>BFD Troubleshooting</h2>
<p>
Troubleshooting of BFD may be required when BFD is not functioning effectively: 
<ul>
  <li>BFD session down: Verify  BFD configuration on both routers.</li>
  <li>BFD session is flapping: check if uRPF has been configured on the interface.</li>
</ul>
</p>
<p>
The following commands are important in troubleshooting BFD:
<table cellspacing="0" width="100%">
<thead style="font-weight: bold; background: #a3a3a3;">
<tr>
  <td style="border: 1px solid;">Command</td>
  <td style="border: 1px solid;">Description</td>
 </tr> 
 </thead>
 <tbody>
  <tr>
    <td style="border-bottom: 1px solid;"><code><b>show bfd neighbor detail</b></code></td> 
    <td style="border-bottom: 1px solid;">Displays the BFD adjacency database. The details
  keyword shows all BFD protocol parameters and timers per neighbor.</td>
  </tr>
  <tr>
  <td  style="border-bottom: 1px solid;"><code><b>debug bfd event</b></code></td> 
  <td  style="border-bottom: 1px solid;"> Displays debugging information about BFD control packets or events such 
  as BFD state transitions.</td>
  </tr>
  </tbody>
</table>
</p>

<h2>Recommendations on Deployment of BFD</h2>
<p>
<ul>
  <li>The use of BFD echo function is encouraged.</li>
  <li>BFD may not be necessary if devices are directly connected on point to point link 
  without any other device such as a switch in-between.
  BFD is ideal if two routers are connected to each other with a switch interconnecting the two devices.
  </li>
  <li>Remember to configure the slower timer command, when you enable BFD echo function.</li>
</ul>
</p>